//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerScripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Top-Down Movement"",
            ""id"": ""538b8dbc-c86a-45d5-ac64-3d1a010ec0d2"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""bb95de64-6397-41dc-8109-2181590423cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""type"": ""Value"",
                    ""id"": ""bd3e33b4-153e-4f40-bd76-0049e6b26b7e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""980d5010-6842-4ce2-9756-dd365230904f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""00c6afde-79c9-4728-bd9b-e2005bdf2542"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a98ef521-7157-4bd3-a57e-cb312c787297"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bb8927d0-20f0-46c7-97fb-697481fa4fc2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09809c51-423a-48e5-b375-dfecca886bbe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7209eacc-c02c-458c-aa1d-973c6eceb490"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow Keys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3b38558-69c0-4bab-960a-398e1015ecba"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f6c5ee52-f860-497d-ac1d-fdf1b3a6492b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5de4aa11-ff01-48a1-a988-c1408d404260"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e3c2152e-6826-4009-bbc3-11c21dfe22ec"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Top-Down Movement
        m_TopDownMovement = asset.FindActionMap("Top-Down Movement", throwIfNotFound: true);
        m_TopDownMovement_WASD = m_TopDownMovement.FindAction("WASD", throwIfNotFound: true);
        m_TopDownMovement_ArrowKeys = m_TopDownMovement.FindAction("Arrow Keys", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Top-Down Movement
    private readonly InputActionMap m_TopDownMovement;
    private List<ITopDownMovementActions> m_TopDownMovementActionsCallbackInterfaces = new List<ITopDownMovementActions>();
    private readonly InputAction m_TopDownMovement_WASD;
    private readonly InputAction m_TopDownMovement_ArrowKeys;
    public struct TopDownMovementActions
    {
        private @PlayerControls m_Wrapper;
        public TopDownMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_TopDownMovement_WASD;
        public InputAction @ArrowKeys => m_Wrapper.m_TopDownMovement_ArrowKeys;
        public InputActionMap Get() { return m_Wrapper.m_TopDownMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDownMovementActions set) { return set.Get(); }
        public void AddCallbacks(ITopDownMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownMovementActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @ArrowKeys.started += instance.OnArrowKeys;
            @ArrowKeys.performed += instance.OnArrowKeys;
            @ArrowKeys.canceled += instance.OnArrowKeys;
        }

        private void UnregisterCallbacks(ITopDownMovementActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @ArrowKeys.started -= instance.OnArrowKeys;
            @ArrowKeys.performed -= instance.OnArrowKeys;
            @ArrowKeys.canceled -= instance.OnArrowKeys;
        }

        public void RemoveCallbacks(ITopDownMovementActions instance)
        {
            if (m_Wrapper.m_TopDownMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopDownMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopDownMovementActions @TopDownMovement => new TopDownMovementActions(this);
    public interface ITopDownMovementActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnArrowKeys(InputAction.CallbackContext context);
    }
}
